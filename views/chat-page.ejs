<link rel="stylesheet" href="/css/style.css">
<script type="module">
    import { EmojiButton } from "/js/index.min.js";
</script>
<div class="container-fluid chat-container">
    <div class="sidebar">
        <a href="/user/chats" class="btn btn-primary">Back</a>
        <% if(data.is_group == 1){ %>
            <h6>Group Info:</h6>
            <p id="group-description"><%= data.group_description %></p>
            <h6>Chat Members:</h6>
            <ul id="user-list" class="list-group">
                <% data.chat_group_users_list.forEach(user => { %>
                    <li class="list-group-item">
                        <a href="/user/user-profile/<%= user.id %>" target="_blank"><%= user.username %></a>
                        <% if(user.is_self == '1'){ %>
                            <span class="badge bg-primary ms-2">You</span>
                        <% } %>
                    </li>
                <% }); %>
            </ul>
        <% } else { %>
            <h6>Private Chat Members:</h6>
            <ul id="user-list" class="list-group">
                <% data.chat_group_users_list.forEach(user => { %>
                    <li class="list-group-item">
                        <a href="/user/user-profile/<%= user.id %>" target="_blank"><%= user.username %></a>
                        <% if(user.is_self == '1'){ %>
                            <span class="badge bg-primary ms-2">You</span>
                        <% } %>
                    </li>
                <% }); %>
            </ul>
        <% } %>
    </div>

    <div class="chat-box">
        <% if(data.is_group == 1){ %>
            <h4 class="text-center border border-primary p-2 rounded mb-3">
                <span id="group-name"><%= data.chat_group_name %></span>
            </h4>
        <% } %>
        <div class="message-list" id="message-list"></div>
        <div id="scroll_bottom"></div>
        <% if(data.is_present_in_group == 1){ %>
            <form id="chat-form" class="d-flex align-items-center">
                <button type="button" id="emoji-button" class="btn btn-outline-secondary me-2">ðŸ˜€</button>
				<input type="text" id="message" class="form-control me-2" placeholder="Type your message here..." required>
                <button type="submit" class="btn btn-primary">Send</button>
            </form>
<form id="file_upload" action="/upload" enctype="multipart/form-data" method="POST" class="file-upload-form">
    <!-- File input button -->
    <div class="mb-3">
        <label for="file" class="form-label"><i class="fas fa-paperclip"></i> Attach File</label>
        <input type="file" name="file[]" id="file" class="form-control" multiple required />
    </div>

    <!-- File preview list -->
    <div id="file-preview-container" class="mb-3"></div>

    <!-- Submit file button -->
    <button type="button" id="submit_file" class="btn btn-primary">Send File</button>
	<input type="hidden" name="chat_id" value="<%= data.chat_id %>" />
</form>
		<% } %>
    </div>
</div>

<style>
    /* File Preview Styles */
    #file-preview-container {
        max-height: 200px; /* Limit the height to 200px */
        overflow-y: auto;  /* Add vertical scroll when there are more than 4 files */
        padding: 0;
        margin-top: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .file-preview {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px;
        background-color: #f8f9fa;
        border-radius: 4px;
        margin-top: 5px;
    }

    .file-name {
        flex-grow: 1;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .remove-file {
        color: #dc3545;
        cursor: pointer;
        font-size: 14px;
    }

    .remove-file:hover {
        text-decoration: underline;
    }

    /* File upload progress bar styles */
    .progress-bar-container {
        width: 100%;
        height: 20px;
        background-color: #f0f0f0;
        border-radius: 5px;
        overflow: hidden;
        margin-top: 5px;
    }

    .progress-bar {
        height: 100%;
        width: 0;
        background-color: #007bff;
        text-align: center;
        color: white;
        line-height: 20px;
        font-size: 14px;
    }

    .form-control:focus {
        border-color: #007bff;
        box-shadow: 0 0 0 0.2rem rgba(38, 143, 255, 0.25);
    }
</style>
<style>
img {
  width: 100%;
  height: auto;
  object-fit: contain;
}
.edit-textarea {
  width: 100%;
  margin-top: 10px;
  margin-bottom: 10px;
}
</style>
<script type="module">
    import { EmojiButton } from "/js/index.min.js";
     const picker = new EmojiButton();
    function addEditEmoji(msg_id){
        const emojiButtonEdit = document.querySelector('#emoji-button_'+msg_id);
        if(emojiButtonEdit){
            emojiButtonEdit.addEventListener('click', () => {
                picker.togglePicker(emojiButtonEdit);
            });
        }
    }

    document.addEventListener("DOMContentLoaded", function () {
			console.log("<%= data.user.id %>");
        const chat_id = location.href.split('/').pop();
        const user_id = <%= data.user.id %>;
        const messageList = document.getElementById('message-list');
        const input = document.querySelector('#message');
        const emojiButton = document.querySelector('#emoji-button');
        
       
        let activeTextarea = null;

        picker.on('emoji', emoji => {
            if (activeTextarea) {
                activeTextarea.value += emoji.emoji;
            } else {
                input.value += emoji.emoji;
            }
        });

        emojiButton.addEventListener('click', () => {
            picker.togglePicker(emojiButton);
        });
        
        

        const socket = io({
            reconnection: true,
            reconnectionAttempts: Infinity,
            reconnectionDelay: 100,
            reconnectionDelayMax: 500,
            withCredentials: true
        });

        jQuery(document).ready(function () {
            socket.emit("joinChatGroup", chat_id);
            socket.emit("getChatGroupMessages", { chat_id, user_id });
            socket.on("messagesOfChatGroup", (data) => appendMessages(data));
        });

        jQuery("#chat-form").on("submit", function (e) {
            e.preventDefault();
			let data = {};
            const message = jQuery("#message").val();
			const files = jQuery("#file-upload").val();
			data.message = message;
			data.files = files;
            if (data) {
                socket.emit('chat message', { data, roomID: chat_id, user_id });
                jQuery("#message").val("");
            }
        });

        function appendMessages(messages) {
            messages.forEach(msg => {
                let msgDiv = messageList.querySelector(`div[message_id='${msg.message_id}']`);

                if (!msgDiv) {
                    msgDiv = document.createElement('div');
                    msgDiv.className = `message ${(msg.user_id === user_id) ? 'user' : 'other'} p-4`;
                    msgDiv.setAttribute("message_id", msg.message_id);
                    messageList.appendChild(msgDiv);
                } else {
                    msgDiv.innerHTML = "";
                }

                const username = document.createElement('div');
                username.className = 'username';
                username.innerText = msg.chat_of_user;

                if (msg.is_edited) {
                    const edited = document.createElement('span');
                    edited.className = 'badge bg-info ms-2';
                    edited.innerText = 'Edited';
                    username.appendChild(edited);
                }

                const content = document.createElement('span');
                content.className = 'message_content';
				if(msg.is_href){
					content.innerHTML = msg.message;
				}else{
                	content.textContent = msg.message;
				}

                const timestamp = document.createElement('div');
                timestamp.className = 'timestamp';
                timestamp.setAttribute('data-timestamp', msg.created_on);
                timestamp.innerText = msg.created_on;

                msgDiv.appendChild(username);
                msgDiv.appendChild(content);
                msgDiv.appendChild(timestamp);

                if (msg.user_id === user_id && (msg.allow_edit || msg.allow_delete)) {
                    const actions = document.createElement('div');
                    actions.className = 'message-actions btn-group mt-2';

                    if (msg.allow_edit) {
                        actions.innerHTML += '<button class="btn btn-sm btn-outline-secondary edit_action">Edit</button>';
                        actions.innerHTML += '<button class="btn btn-sm btn-success save_button" style="display:none;">Save</button>';
                        actions.innerHTML += '<button class="btn btn-sm btn-warning cancel_button" style="display:none;">Cancel</button>';
                    }
                    if (msg.allow_delete) {
                        actions.innerHTML += '<button class="btn btn-sm btn-outline-danger delete_action">Delete</button>';
                    }
                    msgDiv.appendChild(actions);
                }
            });

            messageList.scrollTop = messageList.scrollHeight;
            attachEditDeleteEvents();
        }

        function attachEditDeleteEvents() {
            jQuery(".edit_action").off().on("click", function () {
                const msgDiv = jQuery(this).closest(".message");
                const msgId = msgDiv.attr("message_id");
                const contentSpan = msgDiv.find(".message_content");

                if (msgDiv.find("textarea").length > 0) return;

                const originalText = contentSpan.text();
                const wrapper = jQuery(`<div class='d-flex align-items-center gap-2 mb-1 w-100'></div>`);
                const emojiButton = jQuery(`<button type="button"  id="emoji-button_${msgId}" class="btn btn-outline-secondary">ðŸ˜€</button>`);
                const textarea = jQuery(`<textarea class='form-control edit-textarea flex-grow-1' rows="2">${originalText}</textarea>`);
                wrapper.append(emojiButton).append(textarea);
                contentSpan.hide().after(wrapper);
                activeTextarea = textarea[0];
                addEditEmoji(msgId);



                msgDiv.find(".edit_action, .delete_action").hide();
                msgDiv.find(".save_button, .cancel_button").show();

                msgDiv.find(".save_button").off().on("click", function () {
                    const newText = textarea.val();
                    updateMessage(msgId, newText);
                });

                msgDiv.find(".cancel_button").off().on("click", function () {
                    textarea.remove();
                    emojiButton.remove();
                    contentSpan.show();
                    msgDiv.find(".edit_action, .delete_action").show();
                    msgDiv.find(".save_button, .cancel_button").hide();
                    activeTextarea = null;
                    emojiButton = null;
                });
            });

            jQuery(".delete_action").off().on("click", function () {
                const msgDiv = jQuery(this).closest(".message");
                const msgId = msgDiv.attr("message_id");
                if (confirm("Are you sure you want to delete this message?")) {
                    socket.emit("delete message", { msg_id: msgId, roomID: chat_id, user_id });
                }
            });
        }

        socket.on("chat message", (message) => appendMessages(message));
        socket.on("delete message", (resp) => {
            jQuery(`div[message_id='${resp.msg_id}']`).remove();
        });
        socket.on("edit message", (updatedMessages) => {
            appendMessages(updatedMessages);
        });
        socket.on("disconnect", () => socket.connect());

        function updateMessage(msg_id, newMessage) {
            socket.emit("edit message", {
                message_id: msg_id,
                roomID: chat_id,
                user_id,
                message: newMessage
            });
            activeTextarea = null;
        }
		jQuery("#submit_file").on("click",async function(){
        	const chat_id = jQuery("#chat_id").val();
        	const user_id = jQuery("#user_id").val();
			let data = {};
			const fileInputs = jQuery("[name='file[]']");
			const allSelectedFiles = [];
			fileInputs.each(function() {
				const currentFileInput = this; // 'this' refers to the current DOM element
				
				// Check if files are selected in the current input
				if (currentFileInput.files && currentFileInput.files.length > 0) {
					// Iterate through each file in the current input's FileList
					for (let i = 0; i < currentFileInput.files.length; i++) {
						allSelectedFiles.push(currentFileInput.files[i]);
					}
				}
			});
			//console.log(allSelectedFiles);
			//return;
			let files = [];
			for(let x=0; x<allSelectedFiles.length; x++){
				let file = allSelectedFiles[x];
				//console.log(file, file.size);
				let chunk_file = await fileUpload(file);
				if(chunk_file) files.push(chunk_file);
			}
			//console.log(files);
			if(files && files.length > 0) registerFiles(files);
			return;
			//data.files = allSelectedFiles;
			//data.user_id = user_id;
			//data.chat_id = chat_id;
			//await fileUpload(data);
		})
async function fileUpload(file) {
    const file_name = `${Date.now()}-${file.name}`;
    const chunkSize = 10 * (1024 * 1024); // 10x1MB
    const totalChunks = Math.ceil(file.size / chunkSize);
    let startByte = 0;
    let first = true;
    let chunk_file = {};
    let chunk_resp = {};
    let percent = 0;

    // Find or create a progress bar for this file
	console.log(`#file-${file.name}`);
const safeFileName = file.name.replace(/[^a-zA-Z0-9-_]/g, '_');
console.log(safeFileName);
    const filePreview = document.querySelector(`#file-${safeFileName}`);
    
    if (!filePreview) {
        console.error(`File preview container with ID #file-${file.name} not found.`);
        return;
    }

    // Create the progress bar container and progress bar if they don't exist
    let progressBarContainer = filePreview.querySelector('.progress-bar-container');
    if (!progressBarContainer) {
        // Create a new progress bar container
        progressBarContainer = document.createElement('div');
        progressBarContainer.classList.add('progress-bar-container');

        // Create a progress bar
        const progressBar = document.createElement('div');
        progressBar.classList.add('progress-bar');
        progressBar.textContent = '0%';
        progressBarContainer.appendChild(progressBar);
        filePreview.appendChild(progressBarContainer);
    }

    // Get the actual progress bar for updates
    const progressBar = progressBarContainer.querySelector('.progress-bar');

    for (let i = 0; i < totalChunks; i++) {
        const endByte = Math.min(startByte + chunkSize, file.size);
        const chunk = file.slice(startByte, endByte);
        chunk_resp = await uploadChunk(chunk, totalChunks, i, first, file_name, file.name);
        first = false;
        startByte = endByte;

        // Calculate the percentage of the upload completed
        percent = Math.round(((i + 1) / totalChunks) * 100);

        // Update the progress bar's width and text
        if (progressBar) {
            progressBar.style.width = percent + '%';
            progressBar.textContent = percent + '%';
        }
    }

    chunk_file = chunk_resp.file;
    return chunk_file;
}
		async function uploadChunk(chunk, totalChunks, currentChunk, first=true, file_name="", original_file_name="") {
		  const response = await fetch('/upload/chunk', {
			method: 'POST',
			headers: {
				"x-file-name": file_name,
				"x-original-file-name": original_file_name,
				"x-total-chunks": totalChunks,
				"x-current-chunk": currentChunk,
				"x-chat-id": jQuery("[name='chat_id']").val()
			},
			body: chunk
		  })
		  
		const resp = await response.json();		
	


		//console.log(resp);
		//console.log(chat_id, user_id);
		
		  //if (!response.ok) {
			//throw new Error('Chunk upload failed');
		 // }
		 return resp;
		}

		async function registerFiles(files){
		console.log(files);
			const form_data = new FormData();
			form_data.append("files", JSON.stringify(files));
			console.log(form_data);
			//console.log(JSON.stringify(form_data));
			const response = await fetch("/upload/registerfiles", {
				method: "POST",
				headers: {
					//'content-type': 'multipart/form-data',
					'Content-Type': 'application/json',
					"x-chat-id": jQuery("[name='chat_id']").val()
				},
				body: JSON.stringify({"files" :files})//form_data
			});
			const resp = await response
files.forEach(file => {
        // Sanitize the filename to ensure safe use in an ID
        const safeFileName = file.originalname.replace(/[^a-zA-Z0-9-_]/g, '_');

        // Find the file preview container by its safe ID
        const filePreviewElement = document.querySelector(`#file-${safeFileName}`);

        // If the file preview container exists, remove it from the DOM
        if (filePreviewElement) {
            filePreviewElement.remove();  // Remove the file preview container
            console.log(`File preview removed for: ${safeFileName}`);
        }

        // Also remove the file from the input element's files array
        removeFileFromInput(file);
    });

    // After registration, fetch new chat messages and update the UI
    //socke
		
			socket.emit("getChatGroupMessages", { chat_id, user_id });
			socket.on("messagesOfChatGroup", (data) => appendMessages(data));
		}
	
	const fileInput = document.getElementById('file');
        const filePreviewContainer = document.getElementById('file-preview-container');

        // Handle file input change
		fileInput.addEventListener('change', function () {
            const files = fileInput.files;
            filePreviewContainer.innerHTML = ''; // Clear previous preview

            // Loop through selected files and create previews with a progress bar
            Array.from(files).forEach(file => {
                const filePreview = document.createElement('div');
                filePreview.classList.add('file-preview');
			const safeFileName = file.name.replace(/[^a-zA-Z0-9-_]/g, '_');
                filePreview.setAttribute('id', 'file-' + safeFileName);  // Unique ID for each file preview

                const fileName = document.createElement('span');
                fileName.classList.add('file-name');
                fileName.textContent = file.name;

                const removeButton = document.createElement('span');
                removeButton.classList.add('remove-file');
                removeButton.textContent = 'Remove';

                // Remove the file from preview when clicked
                removeButton.addEventListener('click', function () {
                    const newFileList = Array.from(fileInput.files).filter(f => f !== file);
                    fileInput.files = new FileListItems(newFileList);  // This will not work in standard JS, need custom FileList management
                    filePreview.remove();
                });

                // Progress bar container
                const progressBarContainer = document.createElement('div');
                progressBarContainer.classList.add('progress-bar-container');
                const progressBar = document.createElement('div');
                progressBar.classList.add('progress-bar');
                progressBarContainer.appendChild(progressBar);

                // Append elements to the preview
                filePreview.appendChild(fileName);
                filePreview.appendChild(removeButton);
                filePreview.appendChild(progressBarContainer);

                filePreviewContainer.appendChild(filePreview);
            });
        });

    });
function FileListItems(files) {
        let b = new ClipboardEvent('').clipboardData || new DataTransfer();
        files.forEach(f => b.items.add(f));
        return b.files;
    }

function removeFileFromInput(fileToRemove) {
    const input = document.querySelector("#file"); // Your file input element
   input.value = "";
	const fileList = Array.from(input.files); // Convert FileList to an array

	//const safeFileName = file.name.replace(/[^a-zA-Z0-9-_]/g, '_');
	//console.log(fileList);
    // Remove the file from the array by comparing filenames
    const updatedFiles = fileList.filter(file => file.name.replace(/[^a-zA-Z0-9-_]/g, '_') !== fileToRemove.originalname);

    // Create a new FileList and reset the input value
    const dataTransfer = new DataTransfer();
    updatedFiles.forEach(file => {
        dataTransfer.items.add(file);  // Re-add the remaining files
    });

    // Reset the file input to the new FileList
    input.files = dataTransfer.files;
    console.log("Updated input files list:", input.files);
}
</script>
