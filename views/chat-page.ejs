<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Group Chat</title>
    <link href="/css/bootstrap.min.css" rel="stylesheet">
    <script src="/socket.io/socket.io.js"></script>
    <link rel="stylesheet" href="/css/all.min.css">
    <style>
        .chat-container {
            display: flex;
            height: 100vh;
        }

        .sidebar {
            width: 25%;
            background-color: #f8f9fa;
            padding: 20px;
            border-right: 1px solid #ddd;
        }

        .chat-box {
            width: 75%;
            padding: 20px;
            display: flex;
            flex-direction: column;
        }

        .message-list {
            flex-grow: 1;
            overflow-y: auto;
            border-bottom: 1px solid #ddd;
            padding-bottom: 10px;
            margin-bottom: 10px;
        }

        .message {
            display: flex;
            flex-direction: column; /* Stack the username and message vertically */
            margin: 5px 0; /* Add some spacing between messages */
            padding: 10px; /* Add padding for a better appearance */
            max-width: 80%; /* Limit the width */
            border-radius: 8px; /* Add rounded corners */
        }

        .message.other {
            align-self: flex-end; /* Align to the right */
            background-color: #f8d7da; /* Optional: background color for other messages */
        }

        .message.user {
            align-self: flex-start; /* Align to the left for user messages */
            background-color: transparent; /* No background color for user's messages */
        }

        .username {
            font-weight: bold;
            margin: 5px 0; /* Space between username and message */
        }
        
        #user-list {
            max-height: 20rem; /* Adjust height as needed */
            overflow-y:auto;
        }
        
        .timestamp {
            font-size: 0.8rem;
            color: #6c757d;
            text-align: right;
        }
        .message-actions {
            display: none;
            position: relative; /* Position actions absolutely within the message */
            top: 10px; /* Adjust as needed */
            right: 10px; /* Adjust as needed */
        }

        .message:hover .message-actions {
            display: flex; /* Show actions on hover */
        }

        .btn-group {
            gap: 5px; /* Space between buttons */
        }
    </style>
</head>
<body>

<div class="container-fluid chat-container">
    <!-- Sidebar -->
    <div class="sidebar">
        <!-- Button to open the modal -->
        <a href="/user/chats" class="btn btn-primary">Back</a>
        <% if(is_group == 1){ %>
            <h6>Group Info:</h6>
            <p id="group-description"><%= group_description %></p>
            <!-- User List Section -->
            <h6>Chat Members:</h6>
            <ul id="user-list" class="list-group">
                <% chat_group_users_list.forEach(user => { %>
                    <li class="list-group-item">
                        <a href="/user/user-profile/<%= user.id %>" target="_blank"><%= user.username %></a>
                        <% if(user.is_self == '1'){ %>
                            <span class="badge bg-primary ms-2">You</span>
                        <% } %>
                    </li>
                <% }); %>
            </ul>
        <% } else { %>
            <h6>Private Chat Members:</h6>
            <ul id="user-list" class="list-group">
                <% chat_group_users_list.forEach(user => { %>
                    <li class="list-group-item">
                        <a href="/user/user-profile/<%= user.id %>" target="_blank"><%= user.username %></a>
                        <% if(user.is_self == '1'){ %>
                            <span class="badge bg-primary ms-2">You</span>
                        <% } %>
                    </li>
                <% }); %>
            </ul>
        <% } %>
    </div>

    <!-- Chat Box -->
    <div class="chat-box">
        <!-- Group Name Display -->
        <% if(is_group == 1){ %>
            <h4 class="text-center border border-primary p-2 rounded mb-3">
                <span id="group-name"><%= chat_group_name %></span>
            </h4>
        <% } %>
        
        <div class="message-list" id="message-list">
        </div>
        <div id="scroll_bottom"></div>
        <% if(is_present_in_group == 1){ %>
            <!-- Message Input -->
            <form id="chat-form" class="d-flex">
                
                <input type="text" class="form-control me-2" id="message" placeholder="Type your message here..." required>
                <button type="submit" class="btn btn-primary">Send</button>
            </form>
        <% } %>
    </div>
</div>

<!-- Optional JavaScript -->
<script src="/js/jquery.min.js"></script>
<script src="/js/bootstrap.bundle.min.js"></script>
<script>
    var url_array = location.href.split('/');
    const chat_id = url_array[url_array.length - 1];
    const user_id = <%= user.id %>;
    const messageList = document.getElementById('message-list');
    const options = {  
        // weekday: "short", year: "numeric", month: "short",  
        //day: "numeric", 
        hour: "2-digit", minute: "2-digit"  
    }; 
    var lastMessageDate = null;
    var messages_created_at = [];
    const socket = io({
        reconnection: true,
        reconnectionAttempts: Infinity,
        reconnectionDelay: 1000,   
        reconnectionDelayMax: 5000
    });
    var user_chat_credentials = {};
    var get_messages = false;
    jQuery(document).ready(function(){ 
        socket.emit("joinChatGroup", chat_id);
        
        user_chat_credentials.chat_id = chat_id;
        user_chat_credentials.user_id = user_id;
        socket.emit("getChatGroupMessages", user_chat_credentials);
        var messages = "";
        socket.on("messagesOfChatGroup", (data)=>{
            messages = "";
            messages = data;
            console.log(messages);
            appendMessages(messages);
        });
    });
    setInterval(() => {
        if(get_messages){
            socket.emit("getChatGroupMessages", user_chat_credentials);
            get_messages = false;
        }
        socket.emit("ping");
        socket.on("pong", ()=>{
            console.log("pong");
        })
    }, 5000);

    
    jQuery("#chat-form").on("submit", function(e){
        e.preventDefault();
        const messageInput = document.getElementById('message');
        const message = messageInput.value.trim();

        if (message) {
            let msg_data = {};
            msg_data.message = message;
            msg_data.roomID = chat_id;
            msg_data.user_id = user_id;
            socket.emit('chat message', msg_data); // Send message to server

            // Clear input field
            messageInput.value = '';
        }
    });

    function formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleDateString(undefined, {
            weekday: "short", year: "numeric", month: "short", day: "numeric"
        });
    }

    function appendDateDivider(date) {
        const dateDivider = document.createElement('div');
        dateDivider.classList.add('d-flex', 'align-items-center', 'my-3'); // Center the line and date

        // Left line
        const leftLine = document.createElement('div');
        leftLine.classList.add('flex-grow-1', 'border-bottom', 'border-muted', 'me-2');

        // Date text
        const dateText = document.createElement('span');
        dateText.classList.add('text-muted', 'fw-bold', 'px-2');
        dateText.innerText = date;

        // Right line
        const rightLine = document.createElement('div');
        rightLine.classList.add('flex-grow-1', 'border-bottom', 'border-muted', 'ms-2');

        // Append lines and date text to the divider
        dateDivider.appendChild(leftLine);
        dateDivider.appendChild(dateText);
        dateDivider.appendChild(rightLine);

        messageList.appendChild(dateDivider);
    }



    function appendMessages(messages){
        messages.forEach(msg => {   

            const messageDate = new Date(msg.created_on).toDateString();

            // Check if this message date differs from the last one
            if (lastMessageDate !== messageDate) {
                lastMessageDate = messageDate; // Update the lastMessageDate
                appendDateDivider(formatDate(msg.created_on)); // Add date divider
            }
            

            const newMessage = document.createElement('div');
            newMessage.classList.add('message', (msg.user_id === user_id) ? 'user' : 'other');
            newMessage.setAttribute('message_id', msg.message_id);
            var username = "";
            if(msg.user_id != user_id){
                username = document.createElement('a');
                username.classList.add('username'); // You can style this class in CSS
                username.href = "/user/user-profile/"+msg.user_id;
                username.target = "_blank";
            } else {
                var actions = document.createElement('div');
                actions.classList.add('message-actions', 'btn-group');
                if(msg.allow_edit){
                    const editButton = document.createElement('button');
                    editButton.classList.add('btn', 'btn-sm', 'btn-outline-secondary');
                    editButton.innerHTML = '<i class="fas fa-edit"></i>';
                    editButton.onclick = () => editMessage(msg.message_id);
                    actions.appendChild(editButton);
                }
                
                if(msg.allow_delete){
                    const deleteButton = document.createElement('button');
                    deleteButton.classList.add('btn', 'btn-sm', 'btn-outline-danger');
                    deleteButton.innerHTML = '<i class="fas fa-trash"></i>';
                    deleteButton.onclick = () => deleteMessage(msg.message_id);
                    actions.appendChild(deleteButton);
                }
                
                username = document.createElement('div');
                username.classList.add('username'); // You can style this class in CSS
            }
            username.innerText = msg.chat_of_user; // Assuming message.username contains the username
            
            const messageContent = document.createElement('span');
            messageContent.innerText = msg.message;
            const timestamp = document.createElement('div');
            timestamp.classList.add('timestamp');
            timestamp.innerText = msg.created_on;

            // Append the username and message to the newMessage div
            newMessage.appendChild(username);
            newMessage.appendChild(messageContent);
            newMessage.appendChild(timestamp);
            if(msg.user_id == user_id){
                newMessage.appendChild(actions);
            }
            // Add the message to the message list
            messageList.appendChild(newMessage);
        });
        messageList.scrollTop = messageList.scrollHeight;
    }
    socket.on("chat message", (message) => {
        // console.log(message);
        let tmp_message_list = [];
        tmp_message_list.push(message);
        appendMessages(tmp_message_list);
        // socket.emit("getChatGroupMessages", user_chat_credentials);
        get_messages = true;
    });
    socket.on('disconnect', () => {
        socket.connect();
    });
    function editMessage(msg_id) {
        const msgObj = jQuery(`div[message_id='${msg_id}']`);
        const messageContent = msgObj.find("span");

        // Store original message in case of cancel
        const originalMessage = messageContent.text();

        // Replace span with an input field
        const inputField = jQuery(`<input type='text' class='form-control' />`);
        inputField.val(originalMessage);
        messageContent.replaceWith(inputField);
        inputField.focus();

        // Handle blur (when the user clicks away) and Enter key to save the new message
        inputField.on("blur keydown", async function (e) {
            if (e.type === "blur" || (e.type === "keydown" && e.key === "Enter")) {
                const newMessage = inputField.val().trim();

                // Check if the message has changed
                if (newMessage && newMessage !== originalMessage) {
                    // Send the updated message to the server
                    try {
                        await socket.emit("edit message", { message_id: msg_id, message: newMessage });
                    } catch (error) {
                        console.error("Error updating message:", error);
                    }
                    // Replace input field with the new text
                    inputField.replaceWith(`<span>${newMessage}</span>`);
                } else {
                    // If not changed, revert back to the original message
                    inputField.replaceWith(`<span>${originalMessage}</span>`);
                }
            }
        });
    }

</script>

</body>
</html>
