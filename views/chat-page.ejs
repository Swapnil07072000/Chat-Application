<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Group Chat</title>
    <link href="/css/bootstrap.min.css" rel="stylesheet">
    <script src="/socket.io/socket.io.js"></script>
    <link rel="stylesheet" href="/css/all.min.css">
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>

<div class="container-fluid chat-container">
    <!-- Sidebar -->
    <div class="sidebar">
        <!-- Button to open the modal -->
        <a href="/user/chats" class="btn btn-primary">Back</a>
        <% if(is_group == 1){ %>
            <h6>Group Info:</h6>
            <p id="group-description"><%= group_description %></p>
            <!-- User List Section -->
            <h6>Chat Members:</h6>
            <ul id="user-list" class="list-group">
                <% chat_group_users_list.forEach(user => { %>
                    <li class="list-group-item">
                        <a href="/user/user-profile/<%= user.id %>" target="_blank"><%= user.username %></a>
                        <% if(user.is_self == '1'){ %>
                            <span class="badge bg-primary ms-2">You</span>
                        <% } %>
                    </li>
                <% }); %>
            </ul>
        <% } else { %>
            <h6>Private Chat Members:</h6>
            <ul id="user-list" class="list-group">
                <% chat_group_users_list.forEach(user => { %>
                    <li class="list-group-item">
                        <a href="/user/user-profile/<%= user.id %>" target="_blank"><%= user.username %></a>
                        <% if(user.is_self == '1'){ %>
                            <span class="badge bg-primary ms-2">You</span>
                        <% } %>
                    </li>
                <% }); %>
            </ul>
        <% } %>
    </div>

    <!-- Chat Box -->
    <div class="chat-box">
        <!-- Group Name Display -->
        <% if(is_group == 1){ %>
            <h4 class="text-center border border-primary p-2 rounded mb-3">
                <span id="group-name"><%= chat_group_name %></span>
            </h4>
        <% } %>
        
        <div class="message-list" id="message-list">
        </div>
        <div id="scroll_bottom"></div>
        <% if(is_present_in_group == 1){ %>
            <!-- Message Input -->
            <form id="chat-form" class="d-flex">
                
                <input type="text" class="form-control me-2" id="message" placeholder="Type your message here..." required>
                <button type="submit" class="btn btn-primary">Send</button>
            </form>
        <% } %>
    </div>
</div>

<!-- Optional JavaScript -->
<script src="/js/jquery.min.js"></script>
<script src="/js/bootstrap.bundle.min.js"></script>
<script>
    var url_array = location.href.split('/');
    const chat_id = url_array[url_array.length - 1];
    const user_id = <%= user.id %>;
    const messageList = document.getElementById('message-list');
    const options = {  
        // weekday: "short", year: "numeric", month: "short",  
        //day: "numeric", 
        hour: "2-digit", minute: "2-digit"  
    }; 
    var lastMessageDate = null;
    var messages_created_at = [];
    const socket = io({
        reconnection: true,
        reconnectionAttempts: Infinity,
        reconnectionDelay: 100,   
        reconnectionDelayMax: 500
    });
    var user_chat_credentials = {};
    var get_messages = false;
    jQuery(document).ready(function(){ 
        socket.emit("joinChatGroup", chat_id);
        
        user_chat_credentials.chat_id = chat_id;
        user_chat_credentials.user_id = user_id;
        socket.emit("getChatGroupMessages", user_chat_credentials);
        var messages = "";
        socket.on("messagesOfChatGroup", (data)=>{
            messages = "";
            messages = data;
            // console.log(messages);
            appendMessages(messages);
        });
    });
    setInterval(() => {
        socket.emit("ping");
        socket.on("pong", ()=>{
            console.log("pong");
        })
        // socket.connect();
    }, 5000);
    setInterval(()=>{
        checkValidUpdateDeleteMessages();
    }, 100);
    
    function checkValidUpdateDeleteMessages(){
        jQuery(".user").each(function(){
            // console.log(jQuery(this));
            const tmp_div = jQuery(this);
            const timestamp = jQuery(tmp_div).find("div.timestamp");
            const timestamp_val = jQuery(timestamp).attr("data-timestamp");
            const time_diff = (new Date() - new Date(timestamp_val))/(1000*60);
            const actions_div = jQuery(tmp_div).find("div.message-actions");
            // console.log(time_diff < 20);
            if(time_diff > 2){
                if(jQuery(actions_div).length > 0){
                    // console.log(jQuery(actions_div).length);
                    // console.log(time_diff, jQuery(tmp_div).attr("message_id"));
                    jQuery(actions_div).html("");
                }
            }
        })
    }

    jQuery("#chat-form").on("submit", function(e){
        e.preventDefault();
        const messageInput = document.getElementById('message');
        const message = messageInput.value.trim();

        if (message) {
            let msg_data = {};
            msg_data.message = message;
            msg_data.roomID = chat_id;
            msg_data.user_id = user_id;
            socket.emit('chat message', msg_data); // Send message to server

            // Clear input field
            messageInput.value = '';
        }
    });

    function formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleDateString(undefined, {
            weekday: "short", year: "numeric", month: "short", day: "numeric"
        });
    }

    function appendDateDivider(date) {
        const dateDivider = document.createElement('div');
        dateDivider.classList.add('d-flex', 'align-items-center', 'my-3'); // Center the line and date

        // Left line
        const leftLine = document.createElement('div');
        leftLine.classList.add('flex-grow-1', 'border-bottom', 'border-muted', 'me-2');

        // Date text
        const dateText = document.createElement('span');
        dateText.classList.add('text-muted', 'fw-bold', 'px-2');
        dateText.innerText = date;

        // Right line
        const rightLine = document.createElement('div');
        rightLine.classList.add('flex-grow-1', 'border-bottom', 'border-muted', 'ms-2');

        // Append lines and date text to the divider
        dateDivider.appendChild(leftLine);
        dateDivider.appendChild(dateText);
        dateDivider.appendChild(rightLine);

        messageList.appendChild(dateDivider);
    }



    function appendMessages(messages, message_id_list=[]){
        // console.log(messages);
        messages.forEach(msg => {   

            const messageDate = new Date(msg.created_on).toDateString();

            // Check if this message date differs from the last one
            if (lastMessageDate !== messageDate) {
                lastMessageDate = messageDate; // Update the lastMessageDate
                appendDateDivider(formatDate(msg.created_on)); // Add date divider
            }
            

            const newMessage = document.createElement('div');
            newMessage.classList.add('message', (msg.user_id === user_id) ? 'user' : 'other', "p-4");
            newMessage.setAttribute('message_id', msg.message_id);
            var username = "";
            let saveButton = null, cancelButton = null;
            
            if(msg.user_id != user_id){
                username = document.createElement('a');
                username.classList.add('username'); // You can style this class in CSS
                username.href = "/user/user-profile/"+msg.user_id;
                username.target = "_blank";
            } else {
                var actions = document.createElement('div');
                actions.classList.add('message-actions', 'btn-group');
                if(msg.allow_edit){
                    const editButton = document.createElement('button');
                    editButton.classList.add('btn', 'btn-sm', 'btn-outline-secondary', 'edit_action');
                    editButton.innerHTML = '<i class="fas fa-edit"></i>';
                    editButton.onclick = () => editMessage(msg.message_id);
                    actions.appendChild(editButton);

                    saveButton = document.createElement('button');
                    saveButton.classList.add('btn', 'btn-sm', 'btn-success', 'save_button');
                    // saveButton.innerHTML = '<i class="fas fa-edit"></i>';
                    saveButton.innerHTML = "Save"
                    saveButton.onclick = () => updateMessage(msg.message_id);
                    actions.appendChild(saveButton);
                    cancelButton = document.createElement('button');
                    cancelButton.classList.add('btn', 'btn-sm', 'btn-warning', 'cancel_button');
                    // cancelButton.innerHTML = '<i class="fas fa-edit"></i>';
                    cancelButton.innerHTML = "Cancel"
                    cancelButton.onclick = () => revertChanges(msg.message_id);
                    actions.appendChild(cancelButton);
                }
                
                if(msg.allow_delete){
                    const deleteButton = document.createElement('button');
                    deleteButton.classList.add('btn', 'btn-sm', 'btn-outline-danger', 'delete_action');
                    deleteButton.innerHTML = '<i class="fas fa-trash"></i>';
                    deleteButton.onclick = () => deleteMessage(msg.message_id);
                    actions.appendChild(deleteButton);
                }
                
                username = document.createElement('div');
                username.classList.add('username'); // You can style this class in CSS
            }
            // console.log(msg.is_edited)
            if(msg.is_edited == true){
                edited = document.createElement('span');
                edited.classList.add("badge",  "bg-info", "ms-2");
                edited.innerText = "Edited";
                // console.log(msg.is_edited);
                username.innerText = msg.chat_of_user;
                username.appendChild(edited);

            }else{
                username.innerText = msg.chat_of_user;
            }
            
            const messageContent = document.createElement('span');
            messageContent.classList.add("message_content");
            messageContent.innerText = msg.message;
            const timestamp = document.createElement('div');
            timestamp.classList.add('timestamp');
            if(!msg.allow_edit && msg.is_edited == true){
                timestamp.setAttribute("data-timestamp", msg.updated_on);
                timestamp.innerText = msg.updated_on;
            }else{
                timestamp.setAttribute("data-timestamp", msg.created_on);
                timestamp.innerText = msg.created_on;
            }
            

            // Append the username and message to the newMessage div
            newMessage.appendChild(username);
            newMessage.appendChild(messageContent);
            newMessage.appendChild(timestamp);
            if(msg.user_id == user_id){
                if(msg.allow_edit || msg.allow_delete){
                    newMessage.appendChild(actions);
                }
                
            }
            // Add the message to the message list
            if(!message_id_list.includes(msg.message_id)){
                messageList.appendChild(newMessage);
                if(msg.user_id == user_id && msg.allow_edit){
                    jQuery(saveButton).hide();
                    jQuery(cancelButton).hide();
                }
            }else{
                // console.log(edited);
                const msgObj = jQuery(`div[message_id='${msg.message_id}']`);
                console.log(msgObj);
                const username_edited = msgObj.find("div.username");
                // console.log(username_edited);
                username_edited.closest("div").append(edited);
                // msgObj.replaceWith(newMessage);
            }
            
        });
        messageList.scrollTop = messageList.scrollHeight;
    }
    socket.on("chat message", (message) => {
        // console.log(message);
        appendMessages(message);
    });
    socket.on('disconnect', () => {
        socket.connect();
    });
    var originalMessage = null;
    async function editMessage(msg_id) {
        const msgObj = jQuery(`div[message_id='${msg_id}']`);
        const messageContent = msgObj.find("span.message_content");
        const editButton = msgObj.find("button.edit_action");
        const deleteButton = msgObj.find("button.delete_action");
        const saveButton = msgObj.find("button.save_button");
        const cancelButton= msgObj.find("button.cancel_button");
        // Store original message in case of cancel
        originalMessage = messageContent.text();

        // Replace span with an input field
        const inputField = jQuery(`<input class='message_content' type='text' class='form-control' />`);
        inputField.val(originalMessage);
        messageContent.replaceWith(inputField);
        editButton.hide();
        deleteButton.hide();
        saveButton.show();
        cancelButton.show();
        
        const newMessage = inputField.val().trim();
        // if (newMessage && newMessage !== originalMessage) {
        editButton.hide();
        deleteButton.hide();
    }
    
    async function updateMessage(msg_id){
        // newMessage = originalMessage;
        const msgObj = jQuery(`div[message_id='${msg_id}']`);
        const messageContent = msgObj.find("input.message_content");
        newMessage = jQuery(messageContent).val();
        try {
            // console.log(newMessage);
            const data = { message_id: msg_id, roomID: chat_id, user_id: user_id ,message: newMessage }
            await socket.emit("edit message", data);
            socket.on("edit message", (updateRecord)=>{
                let message_id_list = [];
                message_id_list.push(msg_id);
                // console.log(updateRecord);
                appendMessages(updateRecord, message_id_list);
            });
        } catch (error) {
            console.error("Error updating message:", error);
        }
        revertChanges(msg_id, newMessage);
    } 

    async function revertChanges(msg_id, updateMessage=null) {
        const msgObj = jQuery(`div[message_id='${msg_id}']`);
        const messageContent = msgObj.find("input.message_content");
        const editButton = msgObj.find("button.edit_action");
        const deleteButton = msgObj.find("button.delete_action");
        const saveButton = msgObj.find("button.save_button");
        const cancelButton= msgObj.find("button.cancel_button");
        editButton.show();
        deleteButton.show();
        saveButton.hide();
        cancelButton.hide();
        if(updateMessage){
            originalMessage = updateMessage;
        }
        const inputField = `<span class='message_content'>${originalMessage}</span>`;
        messageContent.replaceWith(inputField);
        originalMessage = null;
    }

</script>

</body>
</html>
